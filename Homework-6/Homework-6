import SwiftUI

// MARK: - Model
struct Event: Identifiable, Hashable {
    let id = UUID()
    var title: String
    var date: Date
    var type: EventType
    var hasReminder: Bool
}

enum EventType: String, CaseIterable, Identifiable {
    case dogumGunu = "Doğum Günü"
    case toplantı = "Toplantı"
    case tatil = "Tatil"
    case spor = "Spor"
    case diger = "Diğer"
    
    var id: String { self.rawValue }
}

// MARK: - ViewModel
class EventViewModel: ObservableObject {
    @Published var events: [Event] = []
    
    func addEvent(title: String, date: Date, type: EventType, hasReminder: Bool) {
        let newEvent = Event(title: title, date: date, type: type, hasReminder: hasReminder)
        events.append(newEvent)
    }
    
    func deleteEvent(_ event: Event) {
        events.removeAll { $0.id == event.id }
    }
    
    func toggleReminder(for event: Event) {
        if let index = events.firstIndex(where: { $0.id == event.id }) {
            events[index].hasReminder.toggle()
        }
    }
}

// MARK: - Views

struct EventListView: View {
    @StateObject private var viewModel = EventViewModel()
    @State private var showingAddEvent = false
    
    var body: some View {
        NavigationView {
            List(viewModel.events) { event in
                NavigationLink(destination: EventDetailView(event: event, viewModel: viewModel)) {
                    VStack(alignment: .leading) {
                        Text(event.title)
                            .font(.headline)
                        Text(event.date, style: .date)
                            .font(.subheadline)
                            .foregroundColor(.gray)
                        Text(event.type.rawValue)
                            .font(.footnote)
                            .foregroundColor(.blue)
                    }
                }
            }
            .navigationTitle("Etkinlikler")
            .toolbar {
                Button(action: {
                    showingAddEvent = true
                }) {
                    Image(systemName: "plus")
                }
            }
            .sheet(isPresented: $showingAddEvent) {
                AddEventView(viewModel: viewModel)
            }
        }
    }
}

struct AddEventView: View {
    @Environment(\.dismiss) var dismiss
    @ObservedObject var viewModel: EventViewModel
    
    @State private var title: String = ""
    @State private var date: Date = Date()
    @State private var type: EventType = .diger
    @State private var hasReminder: Bool = false
    
    var body: some View {
        NavigationView {
            Form {
                Section(header: Text("Etkinlik Bilgileri")) {
                    TextField("Etkinlik Adı", text: $title)
                    DatePicker("Tarih", selection: $date, displayedComponents: .date)
                    Picker("Tür", selection: $type) {
                        ForEach(EventType.allCases) { eventType in
                            Text(eventType.rawValue).tag(eventType)
                        }
                    }
                    Toggle("Hatırlatıcı", isOn: $hasReminder)
                }
            }
            .navigationTitle("Yeni Etkinlik")
            .toolbar {
                ToolbarItem(placement: .cancellationAction) {
                    Button("Vazgeç") {
                        dismiss()
                    }
                }
                ToolbarItem(placement: .confirmationAction) {
                    Button("Kaydet") {
                        viewModel.addEvent(title: title, date: date, type: type, hasReminder: hasReminder)
                        dismiss()
                    }
                    .disabled(title.isEmpty)
                }
            }
        }
    }
}

struct EventDetailView: View {
    let event: Event
    @ObservedObject var viewModel: EventViewModel
    @Environment(\.dismiss) var dismiss
    
    var body: some View {
        VStack(spacing: 20) {
            Text(event.title)
                .font(.largeTitle)
                .bold()
            Text(event.date, style: .date)
                .font(.title2)
            Text("Tür: \(event.type.rawValue)")
                .font(.headline)
            Toggle("Hatırlatıcı", isOn: Binding(
                get: { event.hasReminder },
                set: { _ in viewModel.toggleReminder(for: event) }
            ))
            .padding()
            
            Spacer()
            
            Button(role: .destructive) {
                viewModel.deleteEvent(event)
                dismiss()
            } label: {
                Text("Etkinliği Sil")
                    .bold()
            }
            .padding()
        }
        .padding()
        .navigationTitle("Etkinlik Detayı")
    }
}

// MARK: - App Entry
@main
struct EventApp: App {
    var body: some Scene {
        WindowGroup {
            EventListView()
        }
    }
}
